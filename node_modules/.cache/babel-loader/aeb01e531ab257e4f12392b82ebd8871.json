{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evan McCroary\\\\SWENG Assignments\\\\github_analysis\\\\src\\\\components\\\\LanguageList.jsx\";\nimport React from 'react';\nimport BarChart from './BarChart';\nimport PieChart from './PieChart.jsx';\nlet x = '';\nlet langs = [];\n\nconst LanguageList = props => {\n  if (props.langslist) {\n    {\n      var totalcount = Object.entries(props.langslist).map(([key, eachitem]) => eachitem).reduce((pv, cv) => pv + cv, 0);\n    }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, Object.entries(props.langslist).map(([key, eachitem]) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, key, \" - \", Math.round(100 * eachitem / totalcount), \"%\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, console.log(x = x + eachitem / totalcount + ','))))), console.log(x), React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      class: \"font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Language Graph\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(BarChart, {\n      data: x.split(','),\n      size: [500, 500],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), x = ''), React.createElement(\"div\", {\n      className: \"Chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, i != '' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Chart Representation of Language Count\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(PieChart, {\n      repoSize: x.split(''),\n      repoNames: languages.split(','),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), x = '', languages = '')) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))));\n  } else {\n    return null;\n  }\n};\n\nexport default LanguageList;","map":{"version":3,"sources":["C:/Users/Evan McCroary/SWENG Assignments/github_analysis/src/components/LanguageList.jsx"],"names":["React","BarChart","PieChart","x","langs","LanguageList","props","langslist","totalcount","Object","entries","map","key","eachitem","reduce","pv","cv","Math","round","console","log","split","i","languages"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,IAAIC,CAAC,GAAG,EAAR;AACA,IAAIC,KAAK,GAAG,EAAZ;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,MAAIA,KAAK,CAACC,SAAV,EAAqB;AACjB;AACI,UAAIC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeJ,KAAK,CAACC,SAArB,EAAgCI,GAAhC,CAAoC,CAAC,CAACC,GAAD,EAAMC,QAAN,CAAD,KAChDA,QADY,EACDC,MADC,CACM,CAACC,EAAD,EAAKC,EAAL,KAAYD,EAAE,GAAGC,EADvB,EAC2B,CAD3B,CAAjB;AAEH;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQP,MAAM,CAACC,OAAP,CAAeJ,KAAK,CAACC,SAArB,EAAgCI,GAAhC,CAAoC,CAAC,CAACC,GAAD,EAAMC,QAAN,CAAD,KAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAED,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,GADL,SACaK,IAAI,CAACC,KAAL,CAAY,MAAML,QAAP,GAAmBL,UAA9B,CADb,MADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMW,OAAO,CAACC,GAAR,CAAYjB,CAAC,GAAGA,CAAC,GAAGU,QAAQ,GAACL,UAAb,GAA0B,GAA1C,CAAN,CALJ,CADJ,CAFR,CADJ,EAWKW,OAAO,CAACC,GAAR,CAAYjB,CAAZ,CAXL,EAYI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEI;AAAI,MAAA,KAAK,EAAC,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CAZJ,EAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,CAAC,CAACkB,KAAF,CAAQ,GAAR,CAAhB;AAA8B,MAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKlB,CAAC,GAAG,EAFT,CAhBJ,EAqBI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMmB,CAAC,IAAI,EAAN,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEnB,CAAC,CAACkB,KAAF,CAAQ,EAAR,CAApB;AAAiC,MAAA,SAAS,EAAEE,SAAS,CAACF,KAAV,CAAgB,GAAhB,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,EAKKlB,CAAC,GAAG,EALT,EAMKoB,SAAS,GAAG,EANjB,CAHA,CADH,GAaG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdR,CADJ,CArBJ,CADJ;AA8CH,GAnDD,MAmDO;AAAE,WAAO,IAAP;AAAc;AAE1B,CAtDD;;AAwDA,eAAelB,YAAf","sourcesContent":["import React from 'react';\r\nimport BarChart from './BarChart';\r\nimport PieChart from './PieChart.jsx';\r\n\r\nlet x = ''\r\nlet langs = []\r\nconst LanguageList = (props) => {\r\n    if (props.langslist) {\r\n        {\r\n            var totalcount = Object.entries(props.langslist).map(([key, eachitem]) =>\r\n                (eachitem)).reduce((pv, cv) => pv + cv, 0)\r\n        }\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {\r\n                        Object.entries(props.langslist).map(([key, eachitem]) =>\r\n                            <div>\r\n                                <div key={key}>\r\n                                    {key} - {Math.round((100 * eachitem) / totalcount)}%\r\n\r\n              </div>\r\n                                <div>{console.log(x = x + eachitem/totalcount + ',')}</div></div>)}\r\n                </div>\r\n                {console.log(x)}\r\n                <div className='App-header'>\r\n                <hr></hr>\r\n                    <h1 class=\"font-weight-bold\">Language Graph</h1>\r\n                </div>\r\n                <div>\r\n                    <BarChart data={x.split(',')} size={[500, 500]} />\r\n                    {x = ''}\r\n\r\n                </div>\r\n                <div className='Chart'>\r\n                    <div>\r\n                        {(i != '') ?\r\n                            <div>\r\n                            <h4>Chart Representation of Language Count</h4>\r\n\r\n                            <div>\r\n                            <div>\r\n                                <PieChart repoSize={x.split('')} repoNames={languages.split(',')} />\r\n                            </div>\r\n\r\n                                {x = ''}\r\n                                {languages = ''}\r\n                                </div>\r\n                                </div>:\r\n                            <div></div>\r\n                        }\r\n                </div>\r\n\r\n\r\n                    </div>\r\n\r\n            </div>\r\n        )\r\n    } else { return null; }\r\n\r\n};\r\n\r\nexport default LanguageList;\r\n"]},"metadata":{},"sourceType":"module"}