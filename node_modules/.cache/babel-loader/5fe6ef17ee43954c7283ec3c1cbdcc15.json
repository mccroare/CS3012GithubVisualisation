{"ast":null,"code":"var stemmer = {},\n    cache = {};\nmodule.exports = stemmer;\n\nstemmer.except = function (word, exceptions) {\n  if (exceptions instanceof Array) {\n    if (~exceptions.indexOf(word)) return word;\n  } else {\n    for (var k in exceptions) {\n      if (k === word) return exceptions[k];\n    }\n  }\n\n  return false;\n}; // word - String\n// offset - Integer (optional)\n// replace - Key/Value Array of pattern, string, and function.\n\n\nstemmer.among = function among(word, offset, replace) {\n  if (replace == null) return among(word, 0, offset); // Store the intial value of the word.\n\n  var initial = word.slice(),\n      pattern,\n      replacement;\n\n  for (var i = 0; i < replace.length; i += 2) {\n    pattern = replace[i];\n    pattern = cache[pattern] || (cache[pattern] = new RegExp(replace[i] + \"$\"));\n    replacement = replace[i + 1];\n\n    if (typeof replacement === \"function\") {\n      word = word.replace(pattern, function (m) {\n        var off = arguments[\"\" + (arguments.length - 2)];\n\n        if (off >= offset) {\n          return replacement.apply(null, arguments);\n        } else {\n          return m + \" \";\n        }\n      });\n    } else {\n      word = word.replace(pattern, function (m) {\n        var off = arguments[\"\" + (arguments.length - 2)];\n        return off >= offset ? replacement : m + \" \";\n      });\n    }\n\n    if (word !== initial) break;\n  }\n\n  return word.replace(/ /g, \"\");\n};","map":null,"metadata":{},"sourceType":"script"}